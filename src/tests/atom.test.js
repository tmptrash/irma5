import { U, R, UR, D } from 'irma5/src/shared'
import { type, vmDir, b1Dir, b2Dir, b3Dir, ifDir, thenDir, elseDir, setVmDir,
  setB1Dir, setB2Dir, setB3Dir, setIfDir, setThenDir, setElseDir, secIdx, setSecIdx, secVal,
  setSecVal, setBits, getBitIdx, mov } from './../atom'
import { ATOM_MOV, ATOM_NOP, ATOM_FIX, ATOM_SPL, ATOM_CON, ATOM_JOB, ATOM_REP, ATOM_MUT, NO_DIR
} from './../shared'

describe('Atom tests', () => {
  it('type()', () => {
    expect(type(0b0000000000000000)).toBe(ATOM_NOP)
    expect(type(0b0010000000000000)).toBe(ATOM_MOV)
    expect(type(0b0100000000000000)).toBe(ATOM_FIX)
    expect(type(0b0110000000000000)).toBe(ATOM_SPL)
    expect(type(0b1000000000000000)).toBe(ATOM_CON)
    expect(type(0b1010000000000000)).toBe(ATOM_JOB)
    expect(type(0b1100000000000000)).toBe(ATOM_REP)
    expect(type(0b1110000000000000)).toBe(ATOM_MUT)
    expect(type(0b0001111111111111)).toBe(0b000)
    expect(type(0b0101111111111111)).toBe(0b010)
  })

  it('vmDir()', () => {
    expect(vmDir(0b0000000000000000)).toBe(NO_DIR)
    expect(vmDir(0b0000001000000000)).toBe(0b000)
    expect(vmDir(0b0000010100100010)).toBe(0b001)
    expect(vmDir(0b0000011110110011)).toBe(0b010)
    expect(vmDir(0b0000100001000100)).toBe(0b011)
    expect(vmDir(0b0000101011010101)).toBe(0b100)
    expect(vmDir(0b0000110101100110)).toBe(0b101)
    expect(vmDir(0b0000111111110011)).toBe(0b110)
    expect(vmDir(0b1110000000001111)).toBe(NO_DIR)
    expect(vmDir(0b1100011110110011)).toBe(0b010)
    expect(vmDir(0b1110111111110011)).toBe(0b110)
    expect(vmDir(0b1110100110110010)).toBe(0b011)
  })

  it('setVmDir()', () => {
    expect(vmDir(setVmDir(0b0000000000000000, NO_DIR))).toBe(NO_DIR)
    expect(vmDir(setVmDir(0b0000000000000000, 0b000))).toBe(0b000)
    expect(vmDir(setVmDir(0b0000000000000000, 0b001))).toBe(0b001)
    expect(vmDir(setVmDir(0b0000000000000000, 0b010))).toBe(0b010)
    expect(vmDir(setVmDir(0b0000000000000000, 0b011))).toBe(0b011)
    expect(vmDir(setVmDir(0b0000000000000000, 0b100))).toBe(0b100)
    expect(vmDir(setVmDir(0b0000000000000000, 0b101))).toBe(0b101)
    expect(vmDir(setVmDir(0b0000000000000000, 0b110))).toBe(0b110)
    expect(vmDir(setVmDir(0b0000000000000000, 0b111))).toBe(0b111)
    expect(vmDir(setVmDir(0b1111111111111111, 0b111))).toBe(0b111)
    expect(vmDir(setVmDir(0b1111111111111111, 0b010))).toBe(0b010)
    expect(vmDir(setVmDir(0b1111111111111111, 0b11111))).toBe(0b111)
  })

  it('b1Dir()', () => {
    expect(b1Dir(0b0000000000000000)).toBe(0b000)
    expect(b1Dir(0b0000000001000000)).toBe(0b001)
    expect(b1Dir(0b0000000010000000)).toBe(0b010)
    expect(b1Dir(0b0000000011000000)).toBe(0b011)
    expect(b1Dir(0b0000000100000000)).toBe(0b100)
    expect(b1Dir(0b0000000101000000)).toBe(0b101)
    expect(b1Dir(0b0000000110000000)).toBe(0b110)
    expect(b1Dir(0b0000000111000000)).toBe(0b111)
    expect(b1Dir(0b1111111000000000)).toBe(0b000)
    expect(b1Dir(0b0000000000111111)).toBe(0b000)
    expect(b1Dir(0b1111111010111111)).toBe(0b010)
  })

  it('setB1Dir()', () => {
    expect(b1Dir(setB1Dir(0b0000000000000000, 0b000))).toBe(0b000)
    expect(b1Dir(setB1Dir(0b0000000000000000, 0b001))).toBe(0b001)
    expect(b1Dir(setB1Dir(0b0000000000000000, 0b010))).toBe(0b010)
    expect(b1Dir(setB1Dir(0b0000000000000000, 0b011))).toBe(0b011)
    expect(b1Dir(setB1Dir(0b0000000000000000, 0b100))).toBe(0b100)
    expect(b1Dir(setB1Dir(0b0000000000000000, 0b101))).toBe(0b101)
    expect(b1Dir(setB1Dir(0b0000000000000000, 0b110))).toBe(0b110)
    expect(b1Dir(setB1Dir(0b0000000000000000, 0b111))).toBe(0b111)
    expect(b1Dir(setB1Dir(0b1111111000111111, 0b111))).toBe(0b111)
    expect(b1Dir(setB1Dir(0b1111111010111111, 0b010))).toBe(0b010)
  })

  it('b2Dir()', () => {
    expect(b2Dir(0b0000000000000000)).toBe(0b000)
    expect(b2Dir(0b0000000000001000)).toBe(0b001)
    expect(b2Dir(0b0000000000010000)).toBe(0b010)
    expect(b2Dir(0b0000000000011000)).toBe(0b011)
    expect(b2Dir(0b0000000000100000)).toBe(0b100)
    expect(b2Dir(0b0000000000101000)).toBe(0b101)
    expect(b2Dir(0b0000000000110000)).toBe(0b110)
    expect(b2Dir(0b0000000000111000)).toBe(0b111)
    expect(b2Dir(0b1111111111000111)).toBe(0b000)
    expect(b2Dir(0b1111111111010111)).toBe(0b010)
    expect(b2Dir(0b1111111111011111)).toBe(0b011)
    expect(b2Dir(0b1111111111101111)).toBe(0b101)
  })

  it('setB2Dir()', () => {
    expect(b2Dir(setB2Dir(0b0000000000000000, 0b000))).toBe(0b000)
    expect(b2Dir(setB2Dir(0b0000000000000000, 0b001))).toBe(0b001)
    expect(b2Dir(setB2Dir(0b0000000000000000, 0b010))).toBe(0b010)
    expect(b2Dir(setB2Dir(0b0000000000000000, 0b011))).toBe(0b011)
    expect(b2Dir(setB2Dir(0b0000000000000000, 0b100))).toBe(0b100)
    expect(b2Dir(setB2Dir(0b0000000000000000, 0b101))).toBe(0b101)
    expect(b2Dir(setB2Dir(0b0000000000000000, 0b110))).toBe(0b110)
    expect(b2Dir(setB2Dir(0b0000000000000000, 0b111))).toBe(0b111)
    expect(b2Dir(setB2Dir(0b1111111111111111, 0b111))).toBe(0b111)
    expect(b2Dir(setB2Dir(0b1111111111111111, 0b010))).toBe(0b010)
  })

  it('b3Dir()', () => {
    expect(b3Dir(0b0000000000000000)).toBe(NO_DIR)
    expect(b3Dir(0b0000000000000001)).toBe(0b0000)
    expect(b3Dir(0b0000000000000010)).toBe(0b0001)
    expect(b3Dir(0b0000000000000011)).toBe(0b0010)
    expect(b3Dir(0b0000000000000100)).toBe(0b0011)
    expect(b3Dir(0b0000000000000101)).toBe(0b0100)
    expect(b3Dir(0b0000000000000110)).toBe(0b0101)
    expect(b3Dir(0b0000000000000111)).toBe(0b0110)
    expect(b3Dir(0b0000000000001000)).toBe(0b0111)
    expect(b3Dir(0b0000000000001001)).toBe(0b1000)
    expect(b3Dir(0b1111111111110011)).toBe(0b0010)
    expect(b3Dir(0b1111111111110010)).toBe(0b0001)
  })

  it('setB3Dir()', () => {
    expect(b3Dir(setB3Dir(0b0000000000000000, 0b000))).toBe(0b000)
    expect(b3Dir(setB3Dir(0b0000000000000000, 0b001))).toBe(0b001)
    expect(b3Dir(setB3Dir(0b0000000000000000, 0b010))).toBe(0b010)
    expect(b3Dir(setB3Dir(0b0000000000000000, 0b011))).toBe(0b011)
    expect(b3Dir(setB3Dir(0b0000000000000000, 0b100))).toBe(0b100)
    expect(b3Dir(setB3Dir(0b0000000000000000, 0b101))).toBe(0b101)
    expect(b3Dir(setB3Dir(0b0000000000000000, 0b110))).toBe(0b110)
    expect(b3Dir(setB3Dir(0b0000000000000000, 0b111))).toBe(0b111)
    expect(b3Dir(setB3Dir(0b1111111111111111, 0b111))).toBe(0b111)
    expect(b3Dir(setB3Dir(0b1111111111111111, 0b010))).toBe(0b010)
    expect(b3Dir(setB3Dir(0b1111111111111111, 0b11111))).toBe(0b111)
  })

  it('ifDir()', () => {
    expect(ifDir(0b0000000000000000)).toBe(0b000)
    expect(ifDir(0b0000010000000000)).toBe(0b001)
    expect(ifDir(0b0000100000000010)).toBe(0b010)
    expect(ifDir(0b0000110000000011)).toBe(0b011)
    expect(ifDir(0b0001000000000100)).toBe(0b100)
    expect(ifDir(0b0001010000000101)).toBe(0b101)
    expect(ifDir(0b0001100000000110)).toBe(0b110)
    expect(ifDir(0b0001110000000011)).toBe(0b111)
    expect(ifDir(0b1110001111111111)).toBe(0b000)
    expect(ifDir(0b1110101111111111)).toBe(0b010)
    expect(ifDir(0b1111111111110011)).toBe(0b111)
    expect(ifDir(0b1110111111110010)).toBe(0b011)
  })

  it('setIfDir()', () => {
    expect(ifDir(setIfDir(0b0000000000000000, 0b000))).toBe(0b000)
    expect(ifDir(setIfDir(0b0000000000000000, 0b001))).toBe(0b001)
    expect(ifDir(setIfDir(0b0000000000000000, 0b010))).toBe(0b010)
    expect(ifDir(setIfDir(0b0000000000000000, 0b011))).toBe(0b011)
    expect(ifDir(setIfDir(0b0000000000000000, 0b100))).toBe(0b100)
    expect(ifDir(setIfDir(0b0000000000000000, 0b101))).toBe(0b101)
    expect(ifDir(setIfDir(0b0000000000000000, 0b110))).toBe(0b110)
    expect(ifDir(setIfDir(0b0000000000000000, 0b111))).toBe(0b111)
    expect(ifDir(setIfDir(0b1111111111111111, 0b111))).toBe(0b111)
    expect(ifDir(setIfDir(0b1111111111111111, 0b010))).toBe(0b010)
    expect(ifDir(setIfDir(0b1111111111111111, 0b111))).toBe(0b111)
    expect(ifDir(setIfDir(0b1110001111111111, 0b11111))).toBe(0b111)
  })

  it('thenDir()', () => {
    expect(thenDir(0b0000000000000000)).toBe(0b000)
    expect(thenDir(0b0000000010000000)).toBe(0b001)
    expect(thenDir(0b0000000100000010)).toBe(0b010)
    expect(thenDir(0b0000110110000011)).toBe(0b011)
    expect(thenDir(0b0001001000000100)).toBe(0b100)
    expect(thenDir(0b0001011010000101)).toBe(0b101)
    expect(thenDir(0b0001101100000110)).toBe(0b110)
    expect(thenDir(0b0001111110000011)).toBe(0b111)
    expect(thenDir(0b1110000001111111)).toBe(0b000)
    expect(thenDir(0b1110100101111111)).toBe(0b010)
    expect(thenDir(0b1111111111110011)).toBe(0b111)
    expect(thenDir(0b1110110111110010)).toBe(0b011)
  })

  it('setThenDir()', () => {
    expect(thenDir(setThenDir(0b0000000000000000, 0b000))).toBe(0b000)
    expect(thenDir(setThenDir(0b0000000000000000, 0b001))).toBe(0b001)
    expect(thenDir(setThenDir(0b0000000000000000, 0b010))).toBe(0b010)
    expect(thenDir(setThenDir(0b0000000000000000, 0b011))).toBe(0b011)
    expect(thenDir(setThenDir(0b0000000000000000, 0b100))).toBe(0b100)
    expect(thenDir(setThenDir(0b1110001110111000, 0b101))).toBe(0b101)
    expect(thenDir(setThenDir(0b1011000000000101, 0b110))).toBe(0b110)
    expect(thenDir(setThenDir(0b1101010001010101, 0b111))).toBe(0b111)
    expect(thenDir(setThenDir(0b1111111111111111, 0b111))).toBe(0b111)
    expect(thenDir(setThenDir(0b1111111111111111, 0b010))).toBe(0b010)
    expect(thenDir(setThenDir(0b1111111111111111, 0b111))).toBe(0b111)
    expect(thenDir(setThenDir(0b1110001111111111, 0b11111))).toBe(0b111)
  })

  it('elseDir()', () => {
    expect(elseDir(0b0000000000000000)).toBe(0b000)
    expect(elseDir(0b0000000000010000)).toBe(0b001)
    expect(elseDir(0b0000000100100010)).toBe(0b010)
    expect(elseDir(0b0000110110110011)).toBe(0b011)
    expect(elseDir(0b0001001001000100)).toBe(0b100)
    expect(elseDir(0b0001011011010101)).toBe(0b101)
    expect(elseDir(0b0001101101100110)).toBe(0b110)
    expect(elseDir(0b0001111111110011)).toBe(0b111)
    expect(elseDir(0b1110000000001111)).toBe(0b000)
    expect(elseDir(0b1110100100101111)).toBe(0b010)
    expect(elseDir(0b1111111111110011)).toBe(0b111)
    expect(elseDir(0b1110110110110010)).toBe(0b011)
  })

  it('setElseDir()', () => {
    expect(elseDir(setElseDir(0b0000000000000000, 0b000))).toBe(0b000)
    expect(elseDir(setElseDir(0b0000000000010000, 0b001))).toBe(0b001)
    expect(elseDir(setElseDir(0b0000000000100000, 0b010))).toBe(0b010)
    expect(elseDir(setElseDir(0b0000000000110000, 0b011))).toBe(0b011)
    expect(elseDir(setElseDir(0b0000000001000000, 0b100))).toBe(0b100)
    expect(elseDir(setElseDir(0b1110001111011000, 0b101))).toBe(0b101)
    expect(elseDir(setElseDir(0b1011000001100101, 0b110))).toBe(0b110)
    expect(elseDir(setElseDir(0b1101010001110101, 0b111))).toBe(0b111)
    expect(elseDir(setElseDir(0b1111111111111111, 0b111))).toBe(0b111)
    expect(elseDir(setElseDir(0b1111111110101111, 0b010))).toBe(0b010)
    expect(elseDir(setElseDir(0b1111111111111111, 0b111))).toBe(0b111)
    expect(elseDir(setElseDir(0b0000000000000000, 0b11111))).toBe(0b111)
  })

  it('secIdx()', () => {
    expect(secIdx(0b0000000000000000)).toBe(0)
    expect(secIdx(0b0000000000010000)).toBe(1)
    expect(secIdx(0b0000000000100000)).toBe(2)
    expect(secIdx(0b0000000000110000)).toBe(3)
    expect(secIdx(0b0000000001110000)).toBe(3)
    expect(secIdx(0b0000000001111000)).toBe(3)
    expect(secIdx(0b1111111111001111)).toBe(0)
    expect(secIdx(0b1111111111011111)).toBe(1)
  })

  it('setSecIdx()', () => {
    expect(secIdx(setSecIdx(0b0000000000000000, 0))).toBe(0)
    expect(secIdx(setSecIdx(0b0000000000010000, 0))).toBe(0)
    expect(secIdx(setSecIdx(0b0000000000100000, 1))).toBe(1)
    expect(secIdx(setSecIdx(0b0000000000110000, 2))).toBe(2)
    expect(secIdx(setSecIdx(0b0000000001110000, 3))).toBe(3)
    expect(secIdx(setSecIdx(0b0000000001111000, 4))).toBe(0)
    expect(secIdx(setSecIdx(0b1111111111001111, 2))).toBe(2)
    expect(secIdx(setSecIdx(0b1111111111011111, 3))).toBe(3)
  })

  it('getBitIdx()', () => {
    expect(getBitIdx(ATOM_MOV, 0)).toBe(7)
    expect(getBitIdx(ATOM_MOV, -1)).toBe(-1)
    expect(getBitIdx(ATOM_MOV, -13)).toBe(-1)
    expect(getBitIdx(ATOM_MOV, 1)).toBe(-1)
    expect(getBitIdx(ATOM_MOV, 2)).toBe(-1)
    expect(getBitIdx(ATOM_MOV, 3)).toBe(-1)

    expect(getBitIdx(ATOM_FIX, 0)).toBe(7)
    expect(getBitIdx(ATOM_FIX, 1)).toBe(10)
    expect(getBitIdx(ATOM_FIX, 2)).toBe(-1)
    expect(getBitIdx(ATOM_FIX, 3)).toBe(-1)
    expect(getBitIdx(ATOM_FIX, -3)).toBe(-1)

    expect(getBitIdx(ATOM_SPL, 0)).toBe(7)
    expect(getBitIdx(ATOM_SPL, 1)).toBe(10)
    expect(getBitIdx(ATOM_SPL, 2)).toBe(-1)
    expect(getBitIdx(ATOM_SPL, 8)).toBe(-1)
    expect(getBitIdx(ATOM_SPL, -1)).toBe(-1)
    expect(getBitIdx(ATOM_SPL, -10)).toBe(-1)

    expect(getBitIdx(ATOM_CON, 0)).toBe(3)
    expect(getBitIdx(ATOM_CON, 1)).toBe(6)
    expect(getBitIdx(ATOM_CON, 2)).toBe(9)
    expect(getBitIdx(ATOM_CON, 3)).toBe(12)
    expect(getBitIdx(ATOM_CON, 4)).toBe(-1)
    expect(getBitIdx(ATOM_CON, 5)).toBe(-1)
    expect(getBitIdx(ATOM_CON, -1)).toBe(-1)
    expect(getBitIdx(ATOM_CON, -19)).toBe(-1)

    expect(getBitIdx(ATOM_JOB, 0)).toBe(7)
    expect(getBitIdx(ATOM_JOB, 1)).toBe(-1)
    expect(getBitIdx(ATOM_JOB, 2)).toBe(-1)
    expect(getBitIdx(ATOM_JOB, -1)).toBe(-1)
    expect(getBitIdx(ATOM_JOB, -18)).toBe(-1)

    expect(getBitIdx(ATOM_REP, 0)).toBe(7)
    expect(getBitIdx(ATOM_REP, 1)).toBe(10)
    expect(getBitIdx(ATOM_REP, 2)).toBe(-1)
    expect(getBitIdx(ATOM_REP, 3)).toBe(-1)
    expect(getBitIdx(ATOM_REP, -1)).toBe(-1)
    expect(getBitIdx(ATOM_REP, -6)).toBe(-1)

    expect(getBitIdx(ATOM_MUT, 0)).toBe(7)
    expect(getBitIdx(ATOM_MUT, 1)).toBe(10)
    expect(getBitIdx(ATOM_MUT, 2)).toBe(12)
    expect(getBitIdx(ATOM_MUT, 3)).toBe(-1)
    expect(getBitIdx(ATOM_MUT, 4)).toBe(-1)
    expect(getBitIdx(ATOM_MUT, -1)).toBe(-1)
    expect(getBitIdx(ATOM_MUT, -8)).toBe(-1)
  })

  it('secVal()', () => {
    expect(secVal(0b0000000000000000)).toBe(0)
    expect(secVal(0b0000000000000001)).toBe(1)
    expect(secVal(0b0000000000000010)).toBe(2)
    expect(secVal(0b0000000000000011)).toBe(3)
    expect(secVal(0b0000000000000100)).toBe(4)
    expect(secVal(0b0000000000000101)).toBe(5)
    expect(secVal(0b0000000000000110)).toBe(6)
    expect(secVal(0b0000000000000111)).toBe(7)
    expect(secVal(0b0000000000001000)).toBe(8)
    expect(secVal(0b0000000000001001)).toBe(9)
    expect(secVal(0b0000000000001010)).toBe(10)
    expect(secVal(0b0000000000001011)).toBe(11)
    expect(secVal(0b0000000000001100)).toBe(12)
    expect(secVal(0b0000000000001101)).toBe(13)
    expect(secVal(0b0000000000001110)).toBe(14)
    expect(secVal(0b0000000000001111)).toBe(15)
  })

  it('setSecVal()', () => {
    expect(secVal(setSecVal(0b0000000000000000, 0b0000))).toBe(0)
    expect(secVal(setSecVal(0b0000000000000001, 0b0001))).toBe(1)
    expect(secVal(setSecVal(0b0000000000000010, 0b0011))).toBe(3)
    expect(secVal(setSecVal(0b0000000000000011, 0b0010))).toBe(2)
    expect(secVal(setSecVal(0b0000000000000100, 0b0001))).toBe(1)
    expect(secVal(setSecVal(0b0000000000000101, 0b0100))).toBe(4)
    expect(secVal(setSecVal(0b0000000000000110, 0b0101))).toBe(5)
    expect(secVal(setSecVal(0b0000000000000111, 0b0110))).toBe(6)
    expect(secVal(setSecVal(0b0000000000001000, 0b0101))).toBe(5)
    expect(secVal(setSecVal(0b0000000000001001, 0b0111))).toBe(7)
    expect(secVal(setSecVal(0b0000000000001010, 0b0101))).toBe(5)
    expect(secVal(setSecVal(0b0000000000001011, 0b0111))).toBe(7)
    expect(secVal(setSecVal(0b0000000000001100, 0b01100))).toBe(12)
    expect(secVal(setSecVal(0b0000000000001101, 0b01110))).toBe(14)
    expect(secVal(setSecVal(0b0000000000001110, 0b01011))).toBe(11)
    expect(secVal(setSecVal(0b0000000000001111, 0b00111))).toBe(7)
  })

  it('setBits()', () => {
    expect(setBits(0b1111111111111111, 0b0101, 1, 4)).toBe(0b1010111111111111)
    expect(setBits(0b1111111111111111, 0b0, 2, 1)).toBe(0b1101111111111111)
    expect(setBits(0b0000000000000000, 0b11, 0, 2)).toBe(0b1100000000000000)
    expect(setBits(0b0000000000000000, 0b1, 15, 1)).toBe(0b0000000000000001)
    expect(setBits(0b0000000000000000, 0b1, 16, 1)).toBe(0b0000000000000000)
    expect(setBits(0b0000000000000000, 0b1, -2, 1)).toBe(0b0000000000000000)
    expect(setBits(0b0000000000000000, 0b1, 0, 17)).toBe(0b0000000000000000)
  })

  it('mov()', () => {
    expect(mov(U, R)).toBe(0b0010001010000000)
    expect(mov(R, R)).toBe(0b0010011010000000)
    expect(mov(UR, D)).toBe(0b0010010100000000)
    expect(mov(NO_DIR, D)).toBe(0b0010000100000000)
    expect(mov(NO_DIR, R)).toBe(0b0010000010000000)
  })
})